// Require modules
require('dotenv').config()
const fs = require('fs') // this engine requires the fs module like we did Saturday
const express = require('express')
// const { fruits, veggies } = require('./models/fruits')
const mongoose = require('mongoose')
const Fruit = require('./models/fruit')
const methodOverride = require('method-override')


// this makes 2 const fruits & veggies 

// Create our express app
const app = express()

// Configure the app (app.set)
/*Start Config */
//urlencoded allows to read data sent in a form
app.use(express.urlencoded({extended: true}))

app.use((req,res,next)=>{
  res.locals.data ={}
  next()
})

app.engine('jsx', require('jsx-view-engine').createEngine())
app.set('view engine', 'jsx') // register the jsx view engine
//
mongoose.connect(process.env.MONGO_URI, {useNewURLParser: true, useUnifiedTopology: true})
mongoose.connection.once('open',  ()=>{
  console.log("connected to mongo db atlas")
})
/* END CONFIG */

// Mount our middleware (app.use)

/*Start Middleware */
app.use(express.static('public'))
app.use(methodOverride('_method'))


/* END Middleware */

// Mount Routes
/*Start Routes */


// INDEX --- READ --- GET

// app.get('/fruits', (req, res) => {
//   res.render('template', { title: 'Fruits Index Page', 
//   message: 'Fruits Index', 
//   content: fruits.map((fruit) => `${fruit.name} is ${fruit.color} and ${fruit.readyToEat? 'is ready to eat': 'isn\'t ready to eat'}`) })
// })


// app.get('/fruits', (req, res) => {
//   res.render('fruits/Index', {fruits})
// })


app.get('/fruits', (req, res) => {
  Fruit.find({}, (err, foundFruits) => {
    if(err){
      console.error(err)
      res.status(400).send(err)
    } else {
      res.render('fruits/Index', {
        fruits: foundFruits
      })
    }
  })
})


// NEW (Not applicable in an api)
app.get('/fruits/new', (req, res)=>{
  res.render('fruits/New')
})

// DELETE

app.delete('/fruits/:id', (req, res)=>{
  Fruit.findByIdAndDelete(req.params.id, (err, deletedFruit) =>{
    if(err){
      console.error(err)
      res.status(400).send(err)
    }
    else{
      //if we dont get the error send us back to the 
      //index page which is rendered at fruits endpoint
      res.redirect('/fruits')
    }
  })
})

// UPDATE

app.put("/fruits/:id", (req, res)=>{
    //req.body contains all the form data from the user
  req.body.readyToEat === 'on' || req.body.readyToEat === true  ? req.body.readyToEat = true : req.body.readyToEat = false
  //return the original fruit, and we want to see th enew fruit
  Fruit.findByIdAndUpdate(req.params.id, req.body, {new: true}, (err, updatedFruit)=>{
    if(err){
      console.error(err)
      res.status(400).send(err)
    }
    else{
      res.redirect(`/fruits/${updatedFruit._id}`)
    }
  })
})

// CREATE
//receive data using a form, all the data will be inside 
//req.body. express.url on line 14 parses the info and 
//puts it inside req.body 
app.post('/fruits', (req,res)=>{
  //req.body contains all the form data from the user
  req.body.readyToEat === 'on' ? req.body.readyToEat = true : req.body.readyToEat = false
  //this is a call back. if fruit fails, then we send the errors, else we assign the ]
  //the new fruit value to the variable createdFruit
  Fruit.create(req.body, (error, createdFruit)=> {
    if(error){
      res.status(400).send(error)
    }
    else{
      //res.redirect IS ONLY GOING TO BE A GET REQUEST
      //SINCE IT IS HITTING THE FRUITS ENDPOINT WE ARE CALLING
      //THE INDEX MODEL. but IT CAN ONLY POINT TO GET REAUEST
      res.redirect('/fruits')
      // res.redirect(`/fruits/${createdFruit._id}`)
      // res.send(createdFruit)
    }
  })
})

// EDIT (not applicable in an api)
app.get('/fruits/:id/edit', (req, res) => {
  Fruit.findById(req.params.id, (err, editedFruit) => {
      if(err){
          console.log(err)
          res.status(400).send(err)
      } 
      else {
      res.render('fruits/Edit', {
          fruit: editedFruit
      }
    )}
  })
})

// SHOW ---- READ ---- GET
// app.get('/fruits/:i', (req, res) => {
//   res.render('fruits/Show', {
//    fruit: fruits[req.params.i]
//   })
//  })

app.get('/fruits/:id', (req, res) => {
  Fruit.findById(req.params.id, (err, foundFruit) => {
    if(err){
     console.error(err)
     res.status(400).send(err)
    } else {
     res.render('fruits/Show', {
       fruit: foundFruit
     })
    }
  })
 })
 




/* END ROUTES */


// Tell the app to listen on a port
app.listen(3000, () => {
    console.log('Listening on Port 3000')
})